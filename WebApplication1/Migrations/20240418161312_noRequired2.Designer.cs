// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data.DbContextFile;

#nullable disable

namespace TourishApi.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240418161312_noRequired2")]
    partial class noRequired2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Data.Authentication.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Chat.GuestMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminMessageConId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("GuestMessageConId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Id");

                    b.HasIndex("AdminMessageConId");

                    b.HasIndex("GuestMessageConId");

                    b.ToTable("GuestMessage", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Chat.UserMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("UserReceiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserReceiveId");

                    b.HasIndex("UserSentId");

                    b.ToTable("UserMessage", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Connection.AdminMessageCon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("AdminMessageCon", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Connection.GuestMessageCon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("GuestEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GuestMessageCon", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Connection.GuestMessageConHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminConId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("GuestConId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdminConId")
                        .IsUnique()
                        .HasFilter("[AdminConId] IS NOT NULL");

                    b.HasIndex("GuestConId")
                        .IsUnique();

                    b.ToTable("GuestMessageConHistory", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Connection.NotificationCon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationCon", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Connection.UserMessageCon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("ConnectionID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserMessageCon", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid?>("TourishPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid?>("UserCreateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserReceiveId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TourishPlanId");

                    b.HasIndex("UserCreateId");

                    b.HasIndex("UserReceiveId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.NotificationFcmToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("NotificationFcmToken", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Receipt.FullReceipt", b =>
                {
                    b.Property<Guid>("FullReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(900)
                        .HasColumnType("nvarchar(900)");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<float>("DiscountFloat")
                        .HasColumnType("real");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OriginalPrice")
                        .HasColumnType("float");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TotalReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalTicket")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FullReceiptId");

                    b.HasIndex("TotalReceiptId");

                    b.ToTable("FullReceipt");
                });

            modelBuilder.Entity("WebApplication1.Data.Receipt.TotalReceipt", b =>
                {
                    b.Property<Guid>("TotalReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TourishPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TotalReceiptId");

                    b.HasIndex("TourishPlanId")
                        .IsUnique();

                    b.ToTable("TotalReceipt", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.RestHouse.RestHouseContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(900)
                        .HasColumnType("nvarchar(900)");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<float>("DiscountFloat")
                        .HasColumnType("real");

                    b.Property<string>("HeadQuarterAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotlineNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceBranch")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RestHouseType")
                        .HasColumnType("int");

                    b.Property<string>("SupportEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RestHouseContact");
                });

            modelBuilder.Entity("WebApplication1.Data.RestaurantPlace.Restaurant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(900)
                        .HasColumnType("nvarchar(900)");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<float>("DiscountFloat")
                        .HasColumnType("real");

                    b.Property<string>("HeadQuarterAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotlineNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceBranch")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SupportEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Restaurant");
                });

            modelBuilder.Entity("WebApplication1.Data.SaveFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.Property<Guid?>("TourishPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("TourishPlanId");

                    b.ToTable("SaveFile", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Schedule.EatSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("ntext")
                        .HasDefaultValueSql("''");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("SinglePrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SupportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TourishPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TourishPlanId");

                    b.ToTable("EatSchedule", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Schedule.MovingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("ntext")
                        .HasDefaultValueSql("''");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HeadingPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SinglePrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartingPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TourishPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehiclePlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourishPlanId");

                    b.ToTable("MovingSchedule", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Schedule.StayingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("ntext")
                        .HasDefaultValueSql("''");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("RestHouseBranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RestHouseType")
                        .HasColumnType("int");

                    b.Property<double?>("SinglePrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SupportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TourishPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TourishPlanId");

                    b.ToTable("StayingSchedule", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.TourishCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TourishCategory", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.TourishCategoryRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TourishCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TourishPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TourishCategoryId");

                    b.HasIndex("TourishPlanId");

                    b.ToTable("TourishCategoryRelation", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.TourishComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TourishPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TourishPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("TourishComment", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.TourishInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InterestStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("TourishPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TourishPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("TourishInterest", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.TourishPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("ntext")
                        .HasDefaultValueSql("''");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanStatus")
                        .HasColumnType("int");

                    b.Property<int>("RemainTicket")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartingPoint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalTicket")
                        .HasColumnType("int");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TourishPlan", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.TourishRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("TourishPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TourishPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("TourishRating", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Transport.MovingContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(900)
                        .HasColumnType("nvarchar(900)");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<float>("DiscountFloat")
                        .HasColumnType("real");

                    b.Property<string>("HeadQuarterAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotlineNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MovingContact");
                });

            modelBuilder.Entity("WebApplication1.Data.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("WebApplication1.Data.Authentication.RefreshToken", b =>
                {
                    b.HasOne("WebApplication1.Data.User", "User")
                        .WithMany("RefreshTokenList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_RefreshToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Data.Chat.GuestMessage", b =>
                {
                    b.HasOne("WebApplication1.Data.Connection.AdminMessageCon", "AdminMessageCon")
                        .WithMany("GuestMessages")
                        .HasForeignKey("AdminMessageConId")
                        .HasConstraintName("FK_Admin_MessageCon");

                    b.HasOne("WebApplication1.Data.Connection.GuestMessageCon", "GuestMessageCon")
                        .WithMany("GuestMessages")
                        .HasForeignKey("GuestMessageConId")
                        .HasConstraintName("FK_Guest_MessageCon");

                    b.Navigation("AdminMessageCon");

                    b.Navigation("GuestMessageCon");
                });

            modelBuilder.Entity("WebApplication1.Data.Chat.UserMessage", b =>
                {
                    b.HasOne("WebApplication1.Data.User", "UserReceive")
                        .WithMany("UserMessageReceiveList")
                        .HasForeignKey("UserReceiveId")
                        .IsRequired()
                        .HasConstraintName("FK_UserCon_UserMessage");

                    b.HasOne("WebApplication1.Data.User", "UserSent")
                        .WithMany("UserMessageSentList")
                        .HasForeignKey("UserSentId")
                        .IsRequired()
                        .HasConstraintName("FK_User_SentMessage");

                    b.Navigation("UserReceive");

                    b.Navigation("UserSent");
                });

            modelBuilder.Entity("WebApplication1.Data.Connection.AdminMessageCon", b =>
                {
                    b.HasOne("WebApplication1.Data.User", "Admin")
                        .WithMany("AdminMessageConList")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_AdminMessageCon");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("WebApplication1.Data.Connection.GuestMessageConHistory", b =>
                {
                    b.HasOne("WebApplication1.Data.Connection.AdminMessageCon", "AdminCon")
                        .WithOne("GuestMessageConHis")
                        .HasForeignKey("WebApplication1.Data.Connection.GuestMessageConHistory", "AdminConId")
                        .HasConstraintName("FK_GuestMessageCon_GuestMessageConHis_Admin");

                    b.HasOne("WebApplication1.Data.Connection.GuestMessageCon", "GuestCon")
                        .WithOne("GuestMessageConHis")
                        .HasForeignKey("WebApplication1.Data.Connection.GuestMessageConHistory", "GuestConId")
                        .IsRequired()
                        .HasConstraintName("FK_GuestMessageCon_GuestMessageConHis_Guest");

                    b.Navigation("AdminCon");

                    b.Navigation("GuestCon");
                });

            modelBuilder.Entity("WebApplication1.Data.Connection.NotificationCon", b =>
                {
                    b.HasOne("WebApplication1.Data.User", "User")
                        .WithMany("NotificationConList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_NotificationCon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Data.Connection.UserMessageCon", b =>
                {
                    b.HasOne("WebApplication1.Data.User", "User")
                        .WithMany("UserMessageConList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_MessageCon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Data.Notification", b =>
                {
                    b.HasOne("WebApplication1.Data.TourishPlan", "TourishPlan")
                        .WithMany("NotificationList")
                        .HasForeignKey("TourishPlanId")
                        .HasConstraintName("FK_TourishPlan_Notification");

                    b.HasOne("WebApplication1.Data.User", "UserCreator")
                        .WithMany("NotificationCreateList")
                        .HasForeignKey("UserCreateId")
                        .HasConstraintName("FK_UserCreate_Notification");

                    b.HasOne("WebApplication1.Data.User", "UserReceiver")
                        .WithMany("NotificationReceiveList")
                        .HasForeignKey("UserReceiveId")
                        .HasConstraintName("FK_UserReceive_Notification");

                    b.Navigation("TourishPlan");

                    b.Navigation("UserCreator");

                    b.Navigation("UserReceiver");
                });

            modelBuilder.Entity("WebApplication1.Data.NotificationFcmToken", b =>
                {
                    b.HasOne("WebApplication1.Data.User", "User")
                        .WithOne("FcmToken")
                        .HasForeignKey("WebApplication1.Data.NotificationFcmToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserCreate_NotificationFcmToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Data.Receipt.FullReceipt", b =>
                {
                    b.HasOne("WebApplication1.Data.Receipt.TotalReceipt", "TotalReceipt")
                        .WithMany("FullReceiptList")
                        .HasForeignKey("TotalReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TotalReceipt_FullReceipt");

                    b.Navigation("TotalReceipt");
                });

            modelBuilder.Entity("WebApplication1.Data.Receipt.TotalReceipt", b =>
                {
                    b.HasOne("WebApplication1.Data.TourishPlan", "TourishPlan")
                        .WithOne("TotalReceipt")
                        .HasForeignKey("WebApplication1.Data.Receipt.TotalReceipt", "TourishPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TourishPlan_TotalReceipt");

                    b.Navigation("TourishPlan");
                });

            modelBuilder.Entity("WebApplication1.Data.SaveFile", b =>
                {
                    b.HasOne("WebApplication1.Data.Chat.UserMessage", "Message")
                        .WithMany("Files")
                        .HasForeignKey("MessageId");

                    b.HasOne("WebApplication1.Data.TourishPlan", "TourishPlan")
                        .WithMany()
                        .HasForeignKey("TourishPlanId");

                    b.Navigation("Message");

                    b.Navigation("TourishPlan");
                });

            modelBuilder.Entity("WebApplication1.Data.Schedule.EatSchedule", b =>
                {
                    b.HasOne("WebApplication1.Data.TourishPlan", "TourishPlan")
                        .WithMany("EatSchedules")
                        .HasForeignKey("TourishPlanId")
                        .HasConstraintName("FK_TourishPlan_EatSchedules");

                    b.Navigation("TourishPlan");
                });

            modelBuilder.Entity("WebApplication1.Data.Schedule.MovingSchedule", b =>
                {
                    b.HasOne("WebApplication1.Data.TourishPlan", "TourishPlan")
                        .WithMany("MovingSchedules")
                        .HasForeignKey("TourishPlanId")
                        .HasConstraintName("FK_TourishPlan_MovingSchedule");

                    b.Navigation("TourishPlan");
                });

            modelBuilder.Entity("WebApplication1.Data.Schedule.StayingSchedule", b =>
                {
                    b.HasOne("WebApplication1.Data.TourishPlan", "TourishPlan")
                        .WithMany("StayingSchedules")
                        .HasForeignKey("TourishPlanId")
                        .HasConstraintName("FK_TourishPlan_StayingSchedules");

                    b.Navigation("TourishPlan");
                });

            modelBuilder.Entity("WebApplication1.Data.TourishCategoryRelation", b =>
                {
                    b.HasOne("WebApplication1.Data.TourishCategory", "TourishCategory")
                        .WithMany("TourishCategoryRelations")
                        .HasForeignKey("TourishCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TourishCategory_TourishCategoryRelation");

                    b.HasOne("WebApplication1.Data.TourishPlan", "TourishPlan")
                        .WithMany("TourishCategoryRelations")
                        .HasForeignKey("TourishPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TourishPlan_TourishCategoryRelation");

                    b.Navigation("TourishCategory");

                    b.Navigation("TourishPlan");
                });

            modelBuilder.Entity("WebApplication1.Data.TourishComment", b =>
                {
                    b.HasOne("WebApplication1.Data.TourishPlan", "TourishPlan")
                        .WithMany("TourishCommentList")
                        .HasForeignKey("TourishPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TourishPlan_TourishComment");

                    b.HasOne("WebApplication1.Data.User", "User")
                        .WithMany("TourishCommentList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_TourishComment");

                    b.Navigation("TourishPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Data.TourishInterest", b =>
                {
                    b.HasOne("WebApplication1.Data.TourishPlan", "TourishPlan")
                        .WithMany("TourishInterestList")
                        .HasForeignKey("TourishPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TourishPlan_TourishInterest");

                    b.HasOne("WebApplication1.Data.User", "User")
                        .WithMany("TourishInterests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_TourishInterest");

                    b.Navigation("TourishPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Data.TourishRating", b =>
                {
                    b.HasOne("WebApplication1.Data.TourishPlan", "TourishPlan")
                        .WithMany("TourishRatingList")
                        .HasForeignKey("TourishPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TourishPlan_TourishRating");

                    b.HasOne("WebApplication1.Data.User", "User")
                        .WithMany("TourishRatingList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_TourishRating");

                    b.Navigation("TourishPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Data.Chat.UserMessage", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("WebApplication1.Data.Connection.AdminMessageCon", b =>
                {
                    b.Navigation("GuestMessageConHis")
                        .IsRequired();

                    b.Navigation("GuestMessages");
                });

            modelBuilder.Entity("WebApplication1.Data.Connection.GuestMessageCon", b =>
                {
                    b.Navigation("GuestMessageConHis")
                        .IsRequired();

                    b.Navigation("GuestMessages");
                });

            modelBuilder.Entity("WebApplication1.Data.Receipt.TotalReceipt", b =>
                {
                    b.Navigation("FullReceiptList");
                });

            modelBuilder.Entity("WebApplication1.Data.TourishCategory", b =>
                {
                    b.Navigation("TourishCategoryRelations");
                });

            modelBuilder.Entity("WebApplication1.Data.TourishPlan", b =>
                {
                    b.Navigation("EatSchedules");

                    b.Navigation("MovingSchedules");

                    b.Navigation("NotificationList");

                    b.Navigation("StayingSchedules");

                    b.Navigation("TotalReceipt")
                        .IsRequired();

                    b.Navigation("TourishCategoryRelations");

                    b.Navigation("TourishCommentList");

                    b.Navigation("TourishInterestList");

                    b.Navigation("TourishRatingList");
                });

            modelBuilder.Entity("WebApplication1.Data.User", b =>
                {
                    b.Navigation("AdminMessageConList");

                    b.Navigation("FcmToken")
                        .IsRequired();

                    b.Navigation("NotificationConList");

                    b.Navigation("NotificationCreateList");

                    b.Navigation("NotificationReceiveList");

                    b.Navigation("RefreshTokenList");

                    b.Navigation("TourishCommentList");

                    b.Navigation("TourishInterests");

                    b.Navigation("TourishRatingList");

                    b.Navigation("UserMessageConList");

                    b.Navigation("UserMessageReceiveList");

                    b.Navigation("UserMessageSentList");
                });
#pragma warning restore 612, 618
        }
    }
}
