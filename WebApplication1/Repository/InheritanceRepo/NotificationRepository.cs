using Microsoft.EntityFrameworkCore;
using TourishApi.Extension;
using TourishApi.Repository.Interface;
using WebApplication1.Data;
using WebApplication1.Data.Connection;
using WebApplication1.Data.DbContextFile;
using WebApplication1.Model;
using WebApplication1.Model.VirtualModel;
using Notification = WebApplication1.Data.Notification;

namespace WebApplication1.Repository.InheritanceRepo
{
    public class NotificationRepository : IBaseRepository<NotificationModel>
    {
        private MyDbContext _context;
        public static int PAGE_SIZE { get; set; } = 5;

        public NotificationRepository(MyDbContext _context)
        {
            this._context = _context;
        }

        public Response Add(NotificationModel addModel)
        {
            var addValue = new Notification
            {
                Content = addModel.Content,
                ContentCode = addModel.ContentCode,
                UserCreateId = addModel.UserCreateId,
                UserReceiveId = addModel.UserReceiveId,
                IsGenerate = addModel.IsGenerate,
                TourishPlanId = addModel.TourishPlanId,
                MovingScheduleId = addModel.MovingScheduleId,
                StayingScheduleId = addModel.StayingScheduleId,
                CreateDate = DateTime.UtcNow,
                UpdateDate = DateTime.UtcNow,
            };
            _context.Add(addValue);
            _context.SaveChanges();

            return new Response
            {
                resultCd = 0,
                MessageCode = "I701"
                // Create type success
            };
        }

        public async Task<Response> AddNotifyAsync(NotificationModel addModel)
        {
            var addValue = new Notification
            {
                Content = addModel.Content,
                ContentCode = addModel.ContentCode,
                UserCreateId = addModel.UserCreateId,
                UserReceiveId = addModel.UserReceiveId,
                IsGenerate = addModel.IsGenerate,
                TourishPlanId = addModel.TourishPlanId,
                MovingScheduleId = addModel.MovingScheduleId,
                StayingScheduleId = addModel.StayingScheduleId,
                CreateDate = DateTime.UtcNow,
                UpdateDate = DateTime.UtcNow,
            };
            _context.Add(addValue);
            await _context.SaveChangesAsync();

            return new Response
            {
                resultCd = 0,
                MessageCode = "I701",
                returnId = addValue.Id
                // Create type success
            };
        }

        public Response Delete(Guid id)
        {
            var deleteEntity = _context.Notifications.FirstOrDefault((entity => entity.Id == id));
            if (deleteEntity != null)
            {
                _context.Remove(deleteEntity);
                _context.SaveChanges();
            }

            return new Response
            {
                resultCd = 0,
                MessageCode = "I703",
                // Delete type success
            };
        }

        public Response GetAll(
            string? search,
            int? type,
            string? sortBy,
            string? sortDirection,
            int page = 1,
            int pageSize = 5
        )
        {
            var entityQuery = _context.Notifications.AsQueryable();

            #region Filtering
            if (!string.IsNullOrEmpty(search))
            {
                entityQuery = entityQuery.Where(entity => entity.Content.Contains(search));
            }
            #endregion

            #region Sorting
            if (!string.IsNullOrEmpty(sortBy))
            {
                entityQuery = entityQuery.OrderByColumn(sortBy);
                if (sortDirection == "desc")
                {
                    entityQuery = entityQuery.OrderByColumnDescending(sortBy);
                }
            }
            #endregion

            #region Paging
            var result = PaginatorModel<Notification>.Create(entityQuery, page, pageSize);
            #endregion

            var entityVM = new Response
            {
                resultCd = 0,
                Data = result.ToList(),
                count = result.TotalCount,
            };
            return entityVM;
        }

        public Response GetAllForReceiver(
            string? userId,
            bool? isAutoGenerated,
            string? sortBy,
            string? sortDirection,
            int page = 1,
            int pageSize = 5
        )
        {
            var entityQuery = _context
                .Notifications.Include(entity => entity.UserCreator)
                .Include(entity => entity.UserReceiver)
                .Include(entity => entity.TourishPlan)
                .Include(entity => entity.MovingSchedule)
                .Include(entity => entity.StayingSchedule)
                .AsQueryable();

            #region Filtering
            if (!string.IsNullOrEmpty(userId))
            {
                entityQuery = entityQuery.Where(entity =>
                    entity.UserReceiver.Id.ToString().Contains(userId)
                );
            }

            if (isAutoGenerated != null)
            {
                entityQuery = entityQuery.Where(entity => entity.IsGenerate);
            }
            #endregion

            #region Sorting
            if (!string.IsNullOrEmpty(sortBy))
            {
                entityQuery = entityQuery.OrderByColumn(sortBy);
                if (sortDirection == "desc")
                {
                    entityQuery = entityQuery.OrderByColumnDescending(sortBy);
                }
            }
            #endregion

            #region Paging
            var result = PaginatorModel<Notification>.Create(entityQuery, page, pageSize);
            #endregion

            var resultDto = result
                .Select(notification => new NotificationDTOModel
                {
                    Id = notification.Id,
                    Content = notification.Content,
                    ContentCode = notification.ContentCode,
                    UserCreateId = notification.UserCreateId,
                    UserReceiveId = notification.UserReceiveId,
                    TourishPlanId = notification.TourishPlanId,
                    IsDeleted = notification.IsDeleted,
                    IsRead = notification.IsRead,
                    CreateDate = notification.CreateDate,
                    UpdateDate = notification.UpdateDate,
                    ObjectName = convertNotifyObjectName(notification),
                    CreatorFullName =
                        notification.UserCreator != null ? notification.UserCreator.FullName : "",
                })
                .ToList();

            var entityVM = new Response
            {
                resultCd = 0,
                Data = resultDto,
                count = result.TotalCount,
            };
            return entityVM;
        }

        public Response GetAllForCreator(
            string? userId,
            bool? isAutoGenerated,
            string? sortBy,
            string? sortDirection,
            int page = 1,
            int pageSize = 5
        )
        {
            var entityQuery = _context
                .Notifications.Include(entity => entity.UserCreator)
                .Include(entity => entity.UserReceiver)
                .Include(entity => entity.TourishPlan)
                .Include(entity => entity.MovingSchedule)
                .Include(entity => entity.StayingSchedule)
                .AsQueryable();

            #region Filtering
            if (!string.IsNullOrEmpty(userId))
            {
                entityQuery = entityQuery.Where(entity =>
                    entity.UserCreator.Id.ToString().Contains(userId)
                );
            }

            if (isAutoGenerated != null)
            {
                entityQuery = entityQuery.Where(entity => entity.IsGenerate);
            }
            #endregion

            #region Sorting
            if (!string.IsNullOrEmpty(sortBy))
            {
                entityQuery = entityQuery.OrderByColumn(sortBy);
                if (sortDirection == "desc")
                {
                    entityQuery = entityQuery.OrderByColumnDescending(sortBy);
                }
            }
            #endregion

            #region Paging
            var result = PaginatorModel<Notification>.Create(entityQuery, page, pageSize);
            #endregion

            var resultDto = result
                .Select(notification => new NotificationDTOModel
                {
                    Id = notification.Id,
                    Content = notification.Content,
                    ContentCode = notification.ContentCode,
                    UserCreateId = notification.UserCreateId,
                    UserReceiveId = notification.UserReceiveId,
                    TourishPlanId = notification.TourishPlanId,
                    MovingScheduleId = notification.MovingScheduleId,
                    StayingScheduleId = notification.StayingScheduleId,
                    IsDeleted = notification.IsDeleted,
                    IsRead = notification.IsRead,
                    CreateDate = notification.CreateDate,
                    UpdateDate = notification.UpdateDate,
                    ObjectName = convertNotifyObjectName(notification),
                    CreatorFullName =
                        notification.UserCreator != null ? notification.UserCreator.FullName : "",
                })
                .ToList();

            var entityVM = new Response
            {
                resultCd = 0,
                Data = resultDto,
                count = result.TotalCount,
            };
            return entityVM;
        }

        private string convertNotifyObjectName(Notification notification)
        {
            var objectName = "";
            if (notification.TourishPlan != null)
            {
                objectName = notification.TourishPlan.TourName;
            }
            if (notification.MovingSchedule != null)
            {
                objectName = notification.MovingSchedule.Name;
            }
            if (notification.StayingSchedule != null)
            {
                objectName = notification.StayingSchedule.Name;
            }

            return objectName;
        }

        public Response getById(Guid id)
        {
            var entity = _context
                .Notifications.Include(entity => entity.UserCreator)
                .Include(entity => entity.UserReceiver)
                .Include(entity => entity.TourishPlan)
                .Include(entity => entity.MovingSchedule)
                .Include(entity => entity.StayingSchedule)
                .FirstOrDefault((entity => entity.Id == id));

            return new Response { resultCd = 0, Data = entity };
        }

        public async Task<Notification> getByIdAsync(Guid id)
        {
            var entity = await _context
                .Notifications.Include(entity => entity.UserCreator)
                .Include(entity => entity.UserReceiver)
                .Include(entity => entity.TourishPlan)
                .Include(entity => entity.MovingSchedule)
                .Include(entity => entity.StayingSchedule)
                .FirstOrDefaultAsync((entity => entity.Id == id));

            return entity;
        }

        public Response getByName(String name)
        {
            var entity = _context
                .Notifications.Include(entity => entity.UserCreator)
                .Include(entity => entity.UserReceiver)
                .Include(entity => entity.TourishPlan)
                .Include(entity => entity.MovingSchedule)
                .Include(entity => entity.StayingSchedule)
                .FirstOrDefault((entity => entity.Content == name));

            return new Response { resultCd = 0, Data = entity };
        }

        public NotificationCon getNotificationCon(Guid userReceiveId)
        {
            var connection = _context
                .NotificationConList.OrderByDescending(connection => connection.CreateDate)
                .FirstOrDefault(u => u.UserId == userReceiveId && u.Connected);
            return connection;
        }

        public async Task<NotificationCon> getNotificationConAsync(Guid userReceiveId)
        {
            var connection = await _context.NotificationConList.FirstOrDefaultAsync(u =>
                u.UserId == userReceiveId && u.Connected
            );
            return connection;
        }

        public List<Notification> getByTourRecentUpdate(Guid tourId, Guid modifiedId)
        {
            var compareTime = DateTime.UtcNow.AddMinutes(-30);
            var entityList = _context
                .Notifications.Include(entity => entity.UserCreator)
                .Include(entity => entity.UserReceiver)
                .Include(entity => entity.TourishPlan)
                .Include(entity => entity.MovingSchedule)
                .Include(entity => entity.StayingSchedule)
                .Where(entity =>
                    entity.TourishPlan.Id == tourId
                    && entity.UserCreator.Id == modifiedId
                    && (entity.UpdateDate.Value > compareTime)
                )
                .ToList();

            return entityList;
        }

        public Response Update(NotificationModel entityModel)
        {
            var entity = _context.Notifications.FirstOrDefault(
                (entity => entity.Id == entityModel.Id)
            );
            if (entity != null)
            {
                entity.UpdateDate = DateTime.UtcNow;
                entity.TourishPlanId = entityModel.TourishPlanId;
                entity.MovingScheduleId = entityModel.MovingScheduleId;
                entity.StayingScheduleId = entityModel.StayingScheduleId;
                entity.Content = entityModel.Content;
                entity.ContentCode = entityModel.ContentCode;
                _context.SaveChanges();
            }

            return new Response
            {
                resultCd = 0,
                MessageCode = "I702",
                // Update type success
            };
        }

        public async Task<Response> UpdateAsync(NotificationModel entityModel)
        {
            var entity = _context.Notifications.FirstOrDefault(
                (entity => entity.Id == entityModel.Id)
            );
            if (entity != null)
            {
                entity.UpdateDate = DateTime.UtcNow;
                entity.TourishPlanId = entityModel.TourishPlanId;
                entity.MovingScheduleId = entityModel.MovingScheduleId;
                entity.StayingScheduleId = entityModel.StayingScheduleId;
                entity.Content = entityModel.Content;
                entity.ContentCode = entityModel.ContentCode;
                await _context.SaveChangesAsync();
            }

            return new Response
            {
                resultCd = 0,
                MessageCode = "I702",
                // Update type success
            };
        }

        public Response saveFcmToken(NotificationFcmTokenModel notificationFcmTokenModel)
        {
            var existToken = _context.NotificationFcmTokens.FirstOrDefault(fcm =>
                fcm.UserId == notificationFcmTokenModel.UserId
            );

            if (existToken == null)
            {
                var notificationFcm = new NotificationFcmToken
                {
                    CreateDate = DateTime.UtcNow,
                    UpdateDate = DateTime.UtcNow,
                    UserId = notificationFcmTokenModel.UserId,
                    DeviceToken = notificationFcmTokenModel.DeviceToken
                };

                _context.NotificationFcmTokens.Add(notificationFcm);
                _context.SaveChanges();
            }
            else
            {
                existToken.DeviceToken = notificationFcmTokenModel.DeviceToken;
                existToken.UpdateDate = DateTime.UtcNow;

                _context.SaveChanges();
            }

            return new Response
            {
                resultCd = 0,
                MessageCode = "I704",
                // Update type success
            };
        }

        public NotificationFcmToken GetFcmToken(Guid userId)
        {
            return _context
                .NotificationFcmTokens.OrderByDescending(fcm => fcm.UpdateDate)
                .FirstOrDefault(fcm => fcm.UserId == userId);
        }
    }
}
